name: ci

# 触发事件
on:
  # 手动触发工作流
  workflow_dispatch:
    inputs:
      enable:
        description: "启用或禁用自动 GitHub 自动全绿功能"
        required: true
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
  # 当代码推送到 master 分支时触发
  push:
    branches:
      - master
  # 定时触发，每 15 分钟尝试触发一次
  schedule:
    - cron: "*/15 * * * *"

# 定义工作
jobs:
  autogreen:
    # 指定运行环境
    runs-on: ubuntu-latest
    # 检查是否满足触发条件
    if: |
      (github.event_name == 'schedule' &&
        (
          # 使用 JavaScript 表达式实现取模运算
          ${{ (fromJSON(format('[{}]', github.run_number))[0] % 4 == 0) }} ||
          ${{ (fromJSON(format('[{}]', github.run_number))[0] % 3 == 0) }} ||
          ${{ (fromJSON(format('[{}]', github.run_number))[0] % 2 == 0) }}
        )
      ) ||
      # 当事件类型为 push 时触发
      github.event_name == 'push' ||
      # 当手动触发且 enable 输入为 true 时触发
      (github.event_name == 'workflow_dispatch' && github.event.inputs.enable == 'true')
    steps:
      # 克隆仓库步骤
      - name: Clone repository
        uses: actions/checkout@v3
      # 自动提交以随机填充 2000 - 2024 年热力图的步骤
      - name: Auto green to randomly fill GitHub heatmap from 2000 to 2024
        run: |
          set -e
          # 配置 Git 用户邮箱
          git config --local user.email ${{ secrets.EMAIL }}
          # 配置 Git 用户名称
          git config --local user.name ${{ secrets.NAME }}
          # 设置远程仓库地址
          git remote set-url origin https://${{ github.actor }}:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}
          # 拉取并变基更新代码
          git pull --rebase
          # 设置起始日期为 2000 年 1 月 1 日
          start_date="2000-01-01"
          # 计算 2000 年 1 月 1 日到 2024 年 12 月 31 日的总天数
          total_days=$(( ( $(date -d '2024-12-31' +%s) - $(date -d '2000-01-01' +%s) ) / 86400 + 1 ))
          for ((day = 0; day < total_days; day++)); do
            commit_date=$(date -d "$start_date + $day days" +'%Y-%m-%d %H:%M:%S')
            # 随机决定当天的提交次数（0 - 5 次）
            commit_count=$(( RANDOM % 6 ))
            for ((i = 0; i < commit_count; i++)); do
              commit_message="Random commit at $commit_date"
              GIT_COMMITTER_DATE="$commit_date" git commit --allow-empty -m "$commit_message" --date "$commit_date"
            done
          done
          # 尝试推送，最多重试 3 次
          MAX_RETRIES=3
          RETRY_COUNT=0
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push; then
              break
            else
              echo "Push failed. Retrying in 5 seconds..."
              sleep 5
              RETRY_COUNT=$((RETRY_COUNT + 1))
            fi
          done
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "Failed to push after $MAX_RETRIES attempts."
            exit 1
          fi    
